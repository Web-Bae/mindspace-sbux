{
  "version": 3,
  "sources": ["../../bin/live-reload.js", "../../src/module2/lesson3.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "const hiddenSections = document.querySelectorAll(`[rpa3=\"hidden\"]`);\nconst rpa3Images = document.querySelectorAll(`[rpa3=\"image\"]`);\nconst targets = document.querySelectorAll(`[rpa3=\"image-target\"]`);\nconst messagePlate = document.querySelector(`[rpa3=\"message-plate\"]`);\n\nlet correctAnswers = 0;\nconst disabledPlateIndices = [2, 3];\n\nScrollTrigger.create({\n  trigger: `[rpa3=\"plate-section\"]`,\n  start: 'top top+=1px',\n  onEnter: createPlatesAnimation,\n  once: true,\n  markers: true,\n});\nfunction createPlatesAnimation() {\n  toggleScroll();\n  const state = Flip.getState(rpa3Images);\n\n  rpa3Images.forEach((image, index) => {\n    targets[index].prepend(image);\n  });\n\n  return Flip.from(state, {\n    ease: 'power2.inOut',\n    stagger: 0.05,\n    onComplete: () => {\n      const tl = gsap.timeline();\n      tl.fromTo(\n        `[rpa3=\"plate-content\"]`,\n        {\n          opacity: 0,\n          yPercent: 50,\n        },\n        {\n          opacity: 1,\n          yPercent: 0,\n          stagger: 0.1,\n        }\n      )\n        .to(\n          targets,\n          {\n            border: '1px dashed #f2f0eb',\n            stagger: 0.1,\n          },\n          '<'\n        )\n        .to(\n          `[rpa3-plate-active=\"false\"]`,\n          {\n            opacity: 0.3,\n          },\n          '<'\n        )\n        .fromTo(\n          `[rpa3=\"plate-stack\"]`,\n          { scale: 0, opacity: 0 },\n          {\n            scale: 1,\n            opacity: 1,\n          }\n        );\n      createDraggables();\n    },\n  });\n}\n\nfunction createDraggables() {\n  const plates = Array.from(document.querySelectorAll(`[rpa3=\"plate\"]`));\n  const overlapThreshold = '50%';\n\n  Draggable.create(plates, {\n    bounds: window,\n    onDrag: function () {\n      let i = targets.length;\n      while (--i > -1) {\n        if (this.hitTest(targets[i], overlapThreshold)) {\n          if (disabledPlateIndices.includes(i)) {\n            gsap.to(targets[i], {\n              border: '1px solid #f2f0eb',\n              filter: `brightness(0)`,\n              duration: 0.5,\n            });\n          } else {\n            gsap.to(targets[i], {\n              border: '1px solid #f2f0eb',\n              filter: `brightness(1.5)`,\n              duration: 0.5,\n            });\n          }\n        } else {\n          gsap.to(targets[i], {\n            border: '1px dashed #f2f0eb',\n            filter: `brightness(1)`,\n            duration: 0.5,\n          });\n        }\n      }\n    },\n    onDragEnd: function () {\n      let i = targets.length;\n      let plateMoved = false;\n      while (--i > -1) {\n        if (this.hitTest(targets[i], overlapThreshold)) {\n          const answer = this.target.getAttribute('rpa3-answer');\n          const targetAnswer = targets[i].getAttribute('rpa3-answer');\n          if (answer === targetAnswer) {\n            // CORRECT\n            correctAnswers++;\n            const activePlate = this.target;\n            const targetRect = targets[i].getBoundingClientRect();\n            const plateRect = activePlate.getBoundingClientRect();\n\n            const deltaX = targetRect.left - plateRect.left;\n            const deltaY = targetRect.top - plateRect.top;\n\n            const tl = gsap.timeline();\n            tl.to(activePlate, {\n              x: `+=${deltaX}`,\n              y: `+=${deltaY}`,\n              scale: 0,\n              duration: 0.5,\n              ease: 'power2.inOut',\n            }).to(\n              targets[i],\n              {\n                border: '1px dashed #f2f0eb',\n                filter: `brightness(1)`,\n                duration: 0.5,\n              },\n              '<'\n            );\n            plateMoved = true;\n\n            if (correctAnswers === plates.length) {\n              // ALL CORRECT\n              messagePlate.querySelector(`[rpa3=\"message\"]`).textContent = 'Good job!';\n              const tl = gsap.timeline();\n              tl.set(messagePlate, {\n                pointerEvents: 'auto',\n              }).to(messagePlate, {\n                opacity: 1,\n              });\n\n              hiddenSections.forEach((section) => {\n                section.removeAttribute('rpa3');\n              });\n              toggleScroll();\n            }\n\n            break;\n          } else {\n            // INCORRECT\n            const tl = gsap.timeline();\n            tl.set(messagePlate, {\n              pointerEvents: 'auto',\n            })\n              .to(messagePlate, {\n                opacity: 1,\n              })\n              .to(messagePlate, {\n                opacity: 0,\n                onComplete: () => {\n                  gsap.set(messagePlate, {\n                    pointerEvents: 'none',\n                  });\n                },\n                delay: 1,\n              });\n            gsap.to(this.target, {\n              x: 0,\n              y: 0,\n              duration: 0.5,\n            });\n          }\n        }\n      }\n      if (!plateMoved) {\n        // send back to original position\n        gsap.to(this.target, {\n          x: 0,\n          y: 0,\n          scale: 1,\n          duration: 0.5,\n        });\n        // reset target styles\n        gsap.to(targets, {\n          border: '1px dashed #f2f0eb',\n          filter: `brightness(1)`,\n          duration: 0.5,\n        });\n      }\n    },\n  });\n}\n\nfunction toggleScroll() {\n  const body = document.querySelector('body');\n  const { overflow } = body.style;\n  gsap.set(body, {\n    overflow: overflow === 'hidden' ? 'auto' : 'hidden',\n  });\n}\n\n/*\n$('[rpa3=\"plate-section\"]').each(function (index, element) {\n  const hiddenSections = document.querySelectorAll('[rpa3=\"hidden\"]');\n  const rpa3Images = document.querySelectorAll('[rpa3=\"image\"]');\n  const targets = document.querySelectorAll('[rpa3=\"image-target\"]');\n  const messagePlate = document.querySelector(`[rpa3=\"message-plate\"]`);\n\n  let correctAnswers = 0;\n  let animationInProgress = false;\n  const disabledPlateIndices = [2, 3];\n\n  ScrollTrigger.create({\n    trigger: `[rpa3=\"plate-section\"]`,\n    start: \"top top+=1px\",\n    onEnter: createPlatesAnimation,\n    once: true,\n    markers: true,\n  });\n\n  function createPlatesAnimation() {\n    toggleScroll();\n    const state = Flip.getState(rpa3Images);\n\n    rpa3Images.forEach((image, index) => {\n      targets[index].prepend(image);\n    });\n\n    return Flip.from(state, {\n      ease: \"power2.inOut\",\n      stagger: 0.05,\n      onComplete: () => {\n        const tl = gsap.timeline();\n        tl.fromTo(\n            `[rpa3=\"plate-content\"]`,\n            {\n              opacity: 0,\n              yPercent: 50,\n            },\n            {\n              opacity: 1,\n              yPercent: 0,\n              stagger: 0.1,\n            }\n          )\n          .to(\n            targets,\n            {\n              border: \"1px dashed #f2f0eb\",\n              stagger: 0.1,\n            },\n            \"<\"\n          )\n          .to(\n            `[rpa3-plate-active=\"false\"]`,\n            {\n              opacity: 0.3,\n            },\n            \"<\"\n          )\n          .fromTo(\n            `[rpa3=\"plate-stack\"]`, { scale: 0, opacity: 0 },\n            {\n              scale: 1,\n              opacity: 1,\n            }\n          );\n        createDraggables();\n      },\n    });\n  }\n\n  function createDraggables() {\n    const plates = Array.from(document.querySelectorAll(`[rpa3=\"plate\"]`));\n    const overlapThreshold = \"50%\";\n\n    Draggable.create(plates, {\n      bounds: window,\n      onDrag: function (e) {\n        let i = targets.length;\n        while (--i > -1) {\n          if (this.hitTest(targets[i], overlapThreshold)) {\n            if (disabledPlateIndices.includes(i)) {\n              gsap.to(targets[i], {\n                border: \"1px solid #f2f0eb\",\n                filter: `brightness(0)`,\n                duration: 0.5,\n              });\n            } else {\n              gsap.to(targets[i], {\n                border: \"1px solid #f2f0eb\",\n                filter: `brightness(1.5)`,\n                duration: 0.5,\n              });\n            }\n          } else {\n            gsap.to(targets[i], {\n              border: \"1px dashed #f2f0eb\",\n              filter: `brightness(1)`,\n              duration: 0.5,\n            });\n          }\n        }\n      },\n      onDragEnd: function (e) {\n        let i = targets.length;\n        let plateMoved = false;\n        while (--i > -1) {\n          if (this.hitTest(targets[i], overlapThreshold)) {\n            const answer = this.target.getAttribute(\"rpa3-answer\");\n            const targetAnswer = targets[i].getAttribute(\"rpa3-answer\");\n            if (answer === targetAnswer) {\n              // CORRECT\n              correctAnswers++;\n              const activePlate = this.target;\n              const targetRect = targets[i].getBoundingClientRect();\n              const plateRect = activePlate.getBoundingClientRect();\n\n              const deltaX = targetRect.left - plateRect.left;\n              const deltaY = targetRect.top - plateRect.top;\n\n              const tl = gsap.timeline();\n              tl.to(activePlate, {\n                x: `+=${deltaX}`,\n                y: `+=${deltaY}`,\n                scale: 0,\n                duration: 0.5,\n                ease: \"power2.inOut\",\n              }).to(\n                targets[i],\n                {\n                  border: \"1px dashed #f2f0eb\",\n                  filter: `brightness(1)`,\n                  duration: 0.5,\n                },\n                \"<\"\n              );\n              plateMoved = true;\n\n              if (correctAnswers === plates.length) {\n                // ALL CORRECT\n                messagePlate.querySelector(`[rpa3=\"message\"]`).textContent =\n                  \"Good job!\";\n                const tl = gsap.timeline();\n                tl.set(messagePlate, {\n                  pointerEvents: \"auto\",\n                }).to(messagePlate, {\n                  opacity: 1,\n                });\n\n                hiddenSections.forEach((section) => {\n                  section.removeAttribute(\"rpa3\");\n                });\n                toggleScroll();\n              }\n\n              break;\n            } else {\n              // INCORRECT\n              const tl = gsap.timeline();\n              tl.set(messagePlate, {\n                  pointerEvents: \"auto\",\n                })\n                .to(messagePlate, {\n                  opacity: 1,\n                })\n                .to(messagePlate, {\n                  opacity: 0,\n                  onComplete: () => {\n                    gsap.set(messagePlate, {\n                      pointerEvents: \"none\",\n                    });\n                  },\n                  delay: 1,\n                });\n              gsap.to(this.target, {\n                x: 0,\n                y: 0,\n                duration: 0.5,\n              });\n            }\n          }\n        }\n        if (!plateMoved) {\n          // send back to original position\n          gsap.to(this.target, {\n            x: 0,\n            y: 0,\n            scale: 1,\n            duration: 0.5,\n          });\n          // reset target styles\n          gsap.to(targets, {\n            border: \"1px dashed #f2f0eb\",\n            filter: `brightness(1)`,\n            duration: 0.5,\n          });\n        }\n      },\n    });\n  }\n\n  function toggleScroll() {\n    const body = document.querySelector(\"body\");\n    const overflow = body.style.overflow;\n    gsap.set(body, {\n      overflow: overflow === \"hidden\" ? \"auto\" : \"hidden\",\n    });\n  }\n});\n\n\n*/\n"],
  "mappings": "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",
  "names": ["tl"]
}
